name: ðŸš€ Ansible Multi-Host Deploy DEVIL

on:
  workflow_dispatch:
    inputs:
      instance_count:
        description: 'Number of Servers'
        required: true
        type: choice
        options:
          - '2'
          - '3'
      instance_type:
        description: 'Instance Type'
        required: true
        type: choice
        options:
          - 't2.micro'
          - 't2.small'
      stack_type:
        description: 'Server Stack'
        required: true
        type: choice
        options:
          - 'NGINX'
          - 'Apache'

env:
  AWS_REGION: us-east-1
  UBUNTU_AMI: ami-0c7217cdde317cfec

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible jq

      - name: Launch Infrastructure
        id: infra
        run: |
          # Create security group
          echo "Creating security group..."
          SG_ID=$(aws ec2 create-security-group \
            --group-name "ansible-sg-${{ github.run_id }}" \
            --description "Security group for Ansible cluster" \
            --output json | jq -r '.GroupId')
          
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}]'
          
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}]'
          
          # Create key pair
          echo "Creating key pair..."
          aws ec2 create-key-pair \
            --key-name "ansible-key-${{ github.run_id }}" \
            --query 'KeyMaterial' \
            --output text > ansible-key.pem
          chmod 600 ansible-key.pem
          
          # Launch instances and collect IPs
          declare -a IPS
          echo "Launching instances..."
          
          for i in $(seq 1 ${{ inputs.instance_count }}); do
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ${{ env.UBUNTU_AMI }} \
              --instance-type ${{ inputs.instance_type }} \
              --key-name "ansible-key-${{ github.run_id }}" \
              --security-group-ids $SG_ID \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=ansible-node-$i}]" \
              --output json | jq -r '.Instances[0].InstanceId')
            
            echo "Waiting for instance $INSTANCE_ID..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            
            IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            IPS+=($IP)
            echo "ip_$i=$IP" >> $GITHUB_OUTPUT
          done
          
          # Save all IPs as a comma-separated list
          echo "all_ips=$(IFS=,; echo "${IPS[*]}")" >> $GITHUB_OUTPUT

      - name: Create Ansible Files
        run: |
          # Create inventory file
          echo "[webservers]" > inventory.ini
          IPS="${{ steps.infra.outputs.all_ips }}"
          for IP in ${IPS//,/ }; do
            echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=ansible-key.pem" >> inventory.ini
          done
          
          echo -e "\n[all:vars]" >> inventory.ini
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini
          echo "ansible_python_interpreter=/usr/bin/python3" >> inventory.ini
          
          # Create playbook
          cat > playbook.yml << EOF
          ---
          - hosts: webservers
            become: yes
            tasks:
              - name: Update apt cache
                apt:
                  update_cache: yes
                  cache_valid_time: 3600
              
              - name: Install ${{ inputs.stack_type }}
                apt:
                  name: ${{ inputs.stack_type == 'NGINX' && 'nginx' || 'apache2' }}
                  state: present
              
              - name: Create test page
                copy:
                  content: |
                    <!DOCTYPE html>
                    <html>
                    <head><title>Server Info</title></head>
                    <body>
                      <h1>Server is running!</h1>
                      <p>Stack: ${{ inputs.stack_type }}</p>
                      <p>Host: {{ ansible_host }}</p>
                    </body>
                    </html>
                  dest: /var/www/html/index.html
              
              - name: Ensure service is running
                service:
                  name: ${{ inputs.stack_type == 'NGINX' && 'nginx' || 'apache2' }}
                  state: started
                  enabled: yes
          EOF

      - name: Wait for SSH
        run: |
          IPS="${{ steps.infra.outputs.all_ips }}"
          for IP in ${IPS//,/ }; do
            echo "Waiting for SSH on $IP..."
            until ssh -i ansible-key.pem -o StrictHostKeyChecking=no ubuntu@$IP 'echo "SSH Ready"' 2>/dev/null; do
              sleep 5
            done
          done

      - name: Run Ansible
        run: |
          ansible-playbook -i inventory.ini playbook.yml -v

      - name: Verify Deployment
        run: |
          echo "Verifying deployments..."
          IPS="${{ steps.infra.outputs.all_ips }}"
          for IP in ${IPS//,/ }; do
            echo "Checking $IP..."
            curl -s http://$IP
          done

      - name: Generate Report
        run: |
          cat << EOF > report.md
          # ðŸš€ Deployment Report
          
          ## Server Information
          $(IPS="${{ steps.infra.outputs.all_ips }}"; for IP in ${IPS//,/ }; do echo "* http://$IP"; done)
          
          ## Configuration
          * Stack: ${{ inputs.stack_type }}
          * Instance Type: ${{ inputs.instance_type }}
          * Server Count: ${{ inputs.instance_count }}
          EOF

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: report.md
          retention-days: 1
