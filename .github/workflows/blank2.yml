name: 🚀 Ansible Multi-Host Deploy

on:
  workflow_dispatch:
    inputs:
      instance_count:
        description: 'Number of Servers'
        required: true
        type: choice
        options:
          - '2'
          - '3'
          - '4'
      instance_type:
        description: 'Instance Type'
        required: true
        type: choice
        options:
          - 't2.micro'
          - 't2.small'
      stack_type:
        description: 'Server Stack'
        required: true
        type: choice
        options:
          - 'NGINX + Node.js'
          - 'Apache + PHP'
          - 'NGINX + Python'

env:
  AWS_REGION: us-east-1
  UBUNTU_AMI: ami-0c7217cdde317cfec

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Create Infrastructure
        id: create-infra
        run: |
          # Create security group
          SG_ID=$(aws ec2 create-security-group \
            --group-name "ansible-cluster-${{ github.run_id }}" \
            --description "Security group for Ansible cluster" \
            --output json | jq -r '.GroupId')
          
          # Configure security group
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --ip-permissions '[
              {"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]},
              {"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]},
              {"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}
            ]'
          
          # Create key pair
          aws ec2 create-key-pair \
            --key-name "ansible-key-${{ github.run_id }}" \
            --query 'KeyMaterial' \
            --output text > ansible-key.pem
          chmod 600 ansible-key.pem
          
          # Launch instances
          INSTANCE_IPS=()
          for i in $(seq 1 ${{ inputs.instance_count }}); do
            echo "Launching instance $i..."
            
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ${{ env.UBUNTU_AMI }} \
              --instance-type ${{ inputs.instance_type }} \
              --key-name "ansible-key-${{ github.run_id }}" \
              --security-group-ids $SG_ID \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=ansible-node-$i}]" \
              --output json | jq -r '.Instances[0].InstanceId')
            
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            
            IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            INSTANCE_IPS+=($IP)
            echo "instance_${i}_ip=$IP" >> $GITHUB_OUTPUT
          done
          
          # Create Ansible inventory
          echo "[webservers]" > inventory.ini
          for IP in "${INSTANCE_IPS[@]}"; do
            echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=ansible-key.pem" >> inventory.ini
          done
          
          echo "[all:vars]" >> inventory.ini
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini

      - name: Create Ansible Playbook
        run: |
          cat > playbook.yml << EOF
          ---
          - hosts: webservers
            become: yes
            tasks:
              - name: Update apt cache
                apt:
                  update_cache: yes
                  cache_valid_time: 3600

              - name: Install common packages
                apt:
                  name:
                    - curl
                    - wget
                    - git
                  state: present

              - name: Install NGINX and Node.js
                when: "${{ inputs.stack_type == 'NGINX + Node.js' }}"
                block:
                  - name: Install NGINX
                    apt:
                      name: nginx
                      state: present
                  
                  - name: Install Node.js
                    shell: |
                      curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                      sudo apt-get install -y nodejs

              - name: Install Apache and PHP
                when: "${{ inputs.stack_type == 'Apache + PHP' }}"
                apt:
                  name:
                    - apache2
                    - php
                    - libapache2-mod-php
                  state: present

              - name: Install NGINX and Python
                when: "${{ inputs.stack_type == 'NGINX + Python' }}"
                apt:
                  name:
                    - nginx
                    - python3
                    - python3-pip
                  state: present

              - name: Create test page
                copy:
                  content: |
                    <!DOCTYPE html>
                    <html>
                    <head><title>Server Info</title></head>
                    <body>
                      <h1>Server is running!</h1>
                      <p>Stack: ${{ inputs.stack_type }}</p>
                      <p>Hostname: {{ ansible_hostname }}</p>
                    </body>
                    </html>
                  dest: /var/www/html/index.html

              - name: Ensure web server is running
                service:
                  name: "{{ 'apache2' if '${{ inputs.stack_type }}' == 'Apache + PHP' else 'nginx' }}"
                  state: started
                  enabled: yes
          EOF

      - name: Wait for SSH
        run: |
          echo "Waiting for SSH to be ready..."
          sleep 60

      - name: Run Ansible Playbook
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i inventory.ini playbook.yml -v

      - name: Verify Setup
        run: |
          echo "Verifying servers..."
          for i in $(seq 1 ${{ inputs.instance_count }}); do
            IP=$(eval echo "\${{ steps.create-infra.outputs.instance_${i}_ip }}")
            echo "Testing server $i at $IP..."
            curl -s -I "http://$IP"
          done

      - name: Create Report
        run: |
          echo "# 🚀 Deployment Report" > report.md
          echo "" >> report.md
          echo "## Server Information" >> report.md
          for i in $(seq 1 ${{ inputs.instance_count }}); do
            IP=$(eval echo "\${{ steps.create-infra.outputs.instance_${i}_ip }}")
            echo "### Server $i" >> report.md
            echo "- 🌐 IP: $IP" >> report.md
            echo "- 🔗 URL: http://$IP" >> report.md
          done
          echo "" >> report.md
          echo "## Stack Details" >> report.md
          echo "- 📚 Stack Type: ${{ inputs.stack_type }}" >> report.md
          echo "- 💻 Instance Type: ${{ inputs.instance_type }}" >> report.md

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: report.md
          retention-days: 1

