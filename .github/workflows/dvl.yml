# File: .github/workflows/ultimate-interactive.yml
name: üöÄ Ultimate Interactive Setup
on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'üéØ What would you like to set up?'
        required: true
        type: choice
        options:
          - 'Full Stack Environment'
          - 'Development Tools'
          - 'Security Suite'
          - 'Monitoring System'
          - 'Database Cluster'
          
      environment:
        description: 'üåç Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
          
      username:
        description: 'üë§ Primary username'
        required: true
        type: string
        
      security_level:
        description: 'üîí Security level'
        required: true
        type: choice
        options:
          - basic
          - enhanced
          - paranoid
          
      monitoring_type:
        description: 'üìä Monitoring suite'
        required: true
        type: choice
        options:
          - basic
          - prometheus
          - elk-stack
          - grafana-loki
          
      database_type:
        description: 'üíæ Database system'
        required: true
        type: choice
        options:
          - mysql
          - postgresql
          - mongodb
          - redis
          
      backup_strategy:
        description: 'üíΩ Backup strategy'
        required: true
        type: choice
        options:
          - daily
          - hourly
          - realtime
          
      performance_profile:
        description: '‚ö° Performance profile'
        required: true
        type: choice
        options:
          - balanced
          - memory-optimized
          - compute-optimized
          
      enable_ssl:
        description: 'üîê Enable SSL/TLS'
        required: true
        type: boolean
        default: true
        
      install_tools:
        description: 'üõ†Ô∏è Development tools'
        required: true
        type: boolean
        default: true

jobs:
  prepare-configuration:
    name: üîß Prepare Configuration
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.generate-config.outputs.config }}
    
    steps:
      - name: Generate configuration
        id: generate-config
        run: |
          CONFIG=$(cat << EOF
          {
            "setup_type": "${{ github.event.inputs.setup_type }}",
            "environment": "${{ github.event.inputs.environment }}",
            "username": "${{ github.event.inputs.username }}",
            "security_level": "${{ github.event.inputs.security_level }}",
            "monitoring_type": "${{ github.event.inputs.monitoring_type }}",
            "database_type": "${{ github.event.inputs.database_type }}",
            "backup_strategy": "${{ github.event.inputs.backup_strategy }}",
            "performance_profile": "${{ github.event.inputs.performance_profile }}",
            "enable_ssl": ${{ github.event.inputs.enable_ssl }},
            "install_tools": ${{ github.event.inputs.install_tools }}
          }
          EOF
          )
          echo "config=$(echo $CONFIG | jq -c .)" >> $GITHUB_OUTPUT

  setup-environment:
    name: üéÆ Interactive Setup
    needs: prepare-configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==8.5.0 ansible-lint docker molecule pytest testinfra

      - name: Create ultimate playbook
        run: |
          mkdir -p {playbooks,templates,inventory,group_vars,host_vars,files,roles}
          
          cat << 'EOF' > playbooks/ultimate_setup.yml
          ---
          - name: üöÄ Ultimate Interactive Setup
            hosts: localhost
            become: yes
            vars:
              config: "{{ lookup('env', 'WORKFLOW_CONFIG') | from_json }}"
              
            pre_tasks:
              - name: Display banner
                debug:
                  msg: |
                    üéØ Starting Ultimate Setup
                    ========================
                    Setup Type: {{ config.setup_type }}
                    Environment: {{ config.environment }}
                    Security Level: {{ config.security_level }}
                    
            tasks:
              - name: Basic System Setup
                block:
                  - name: Update system
                    apt:
                      update_cache: yes
                      upgrade: dist
                    
                  - name: Install essential packages
                    apt:
                      name:
                        - curl
                        - wget
                        - git
                        - vim
                        - htop
                        - net-tools
                        - ufw
                        - fail2ban
                      state: present

              - name: Configure Security
                block:
                  - name: Setup UFW
                    ufw:
                      rule: allow
                      port: "{{ item }}"
                      proto: tcp
                    loop:
                      - 22
                      - 80
                      - 443
                    
                  - name: Enable UFW
                    ufw:
                      state: enabled
                      policy: deny
                    
                  - name: Configure fail2ban
                    template:
                      src: templates/fail2ban.conf.j2
                      dest: /etc/fail2ban/jail.local
                    notify: restart fail2ban
                    
                  - name: Enhanced security measures
                    when: config.security_level in ['enhanced', 'paranoid']
                    block:
                      - name: Install security packages
                        apt:
                          name:
                            - rkhunter
                            - chkrootkit
                            - auditd
                          state: present
                          
                      - name: Configure auditd
                        template:
                          src: templates/auditd.conf.j2
                          dest: /etc/audit/auditd.conf
                        notify: restart auditd
                        
                  - name: Paranoid security measures
                    when: config.security_level == 'paranoid'
                    block:  
                      - name: Install additional security
                        apt:
                          name:
                            - apparmor
                            - selinux
                            - aide
                          state: present

              - name: Setup Monitoring
                block:
                  - name: Install Prometheus stack
                    when: config.monitoring_type == 'prometheus'
                    block:
                      - name: Install Prometheus
                        apt:
                          name: prometheus
                          state: present
                          
                      - name: Install Node Exporter
                        apt:
                          name: prometheus-node-exporter
                          state: present
                          
                  - name: Install ELK stack
                    when: config.monitoring_type == 'elk-stack'
                    block:
                      - name: Add Elastic repository
                        apt_repository:
                          repo: deb https://artifacts.elastic.co/packages/7.x/apt stable main
                          state: present
                          
                      - name: Install ELK
                        apt:
                          name:
                            - elasticsearch
                            - logstash
                            - kibana
                          state: present
                          
              - name: Database Setup
                block:
                  - name: Install MySQL
                    when: config.database_type == 'mysql'
                    apt:
                      name: mysql-server
                      state: present
                      
                  - name: Install PostgreSQL
                    when: config.database_type == 'postgresql'
                    apt:
                      name: postgresql
                      state: present
                      
                  - name: Install MongoDB
                    when: config.database_type == 'mongodb'
                    block:
                      - name: Add MongoDB repository
                        apt_repository:
                          repo: deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse
                          state: present
                          
                      - name: Install MongoDB
                        apt:
                          name: mongodb-org
                          state: present
                          
              - name: Configure Backups
                block:
                  - name: Install backup tools
                    apt:
                      name:
                        - borgbackup
                        - restic
                      state: present
                      
                  - name: Configure backup schedule
                    template:
                      src: "templates/backup-{{ config.backup_strategy }}.j2"
                      dest: /etc/cron.d/backup
                      mode: '0644'
                      
              - name: Performance Tuning
                block:
                  - name: Configure memory profile
                    when: config.performance_profile == 'memory-optimized'
                    sysctl:
                      name: "{{ item.name }}"
                      value: "{{ item.value }}"
                    with_items:
                      - { name: 'vm.swappiness', value: '10' }
                      - { name: 'vm.vfs_cache_pressure', value: '50' }
                      
                  - name: Configure compute profile
                    when: config.performance_profile == 'compute-optimized'
                    sysctl:
                      name: "{{ item.name }}"
                      value: "{{ item.value }}"
                    with_items:
                      - { name: 'kernel.sched_migration_cost_ns', value: '5000000' }
                      - { name: 'kernel.sched_autogroup_enabled', value: '0' }
                      
              - name: SSL/TLS Setup
                when: config.enable_ssl|bool
                block:
                  - name: Install Certbot
                    apt:
                      name: certbot
                      state: present
                      
                  - name: Configure SSL
                    template:
                      src: templates/ssl.conf.j2
                      dest: /etc/ssl/openssl.cnf
                      
              - name: Development Tools
                when: config.install_tools|bool
                block:
                  - name: Install development packages
                    apt:
                      name:
                        - build-essential
                        - python3-dev
                        - nodejs
                        - npm
                        - docker.io
                        - docker-compose
                      state: present
                      
            handlers:
              - name: restart fail2ban
                service:
                  name: fail2ban
                  state: restarted
                  
              - name: restart auditd
                service:
                  name: auditd
                  state: restarted
          EOF

      - name: Create inventory
        run: |
          mkdir -p inventory
          echo "localhost ansible_connection=local" > inventory/hosts

      - name: Run playbook
        env:
          WORKFLOW_CONFIG: ${{ needs.prepare-configuration.outputs.config }}
        run: ansible-playbook -i inventory/hosts playbooks/ultimate_setup.yml -v

      - name: Generate report
        run: |
          echo "üéâ Setup Complete!" > setup_report.txt
          echo "==================" >> setup_report.txt
          echo "" >> setup_report.txt
          echo "Configuration:" >> setup_report.txt
          echo "${{ needs.prepare-configuration.outputs.config }}" | jq . >> setup_report.txt

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: setup-report
          path: setup_report.txt
          retention-days: 30

  notify:
    name: üì¢ Send Notification
    needs: setup-environment
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send completion notification
        run: |
          echo "üéâ Setup completed!"
          echo "Setup type: ${{ github.event.inputs.setup_type }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
