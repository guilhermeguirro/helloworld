# File: .github/workflows/ansible-showcase.yml
name: Ansible Ultimate Showcase
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily run
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install ansible==8.5.0 ansible-lint yamllint safety bandit
          sudo apt-get update
          sudo apt-get install -y ssh-audit

      - name: Run security checks
        run: |
          safety check
          bandit -r .
          ssh-audit localhost || true

  ansible-test:
    name: Ansible Advanced Testing
    needs: security-scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==8.5.0 ansible-lint docker molecule molecule-docker pytest testinfra

      - name: Create showcase playbook
        run: |
          mkdir -p {playbooks,roles,inventory,group_vars,host_vars,templates,files}
          
          # Create main playbook
          cat << 'EOF' > playbooks/showcase.yml
          ---
          - name: Ultimate Ansible Showcase
            hosts: all
            become: yes
            vars:
              app_name: showcase
              environments:
                - test
                - staging
                - production
              services:
                - nginx
                - mysql
                - redis
                - nodejs
            
            pre_tasks:
              - name: Update package cache
                apt:
                  update_cache: yes
                  cache_valid_time: 3600
                
              - name: Install common packages
                apt:
                  name:
                    - curl
                    - wget
                    - git
                    - vim
                    - htop
                    - net-tools
                  state: present

            roles:
              - system_hardening
              - security_audit
              - nginx_setup
              - mysql_setup
              - monitoring

            tasks:
              - name: Configure firewall
                ufw:
                  rule: allow
                  port: "{{ item }}"
                  proto: tcp
                with_items:
                  - 22
                  - 80
                  - 443
                  - 3306
                
              - name: Install Docker
                block:
                  - name: Add Docker GPG key
                    apt_key:
                      url: https://download.docker.com/linux/ubuntu/gpg
                      state: present
                      
                  - name: Add Docker repository
                    apt_repository:
                      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
                      state: present
                      
                  - name: Install Docker packages
                    apt:
                      name:
                        - docker-ce
                        - docker-ce-cli
                        - containerd.io
                      state: present
                rescue:
                  - name: Docker installation failed
                    debug:
                      msg: "Docker installation failed, check system requirements"

              - name: Deploy containers
                docker_container:
                  name: "{{ item }}"
                  image: "{{ item }}:latest"
                  state: started
                  restart_policy: always
                  published_ports:
                    - "80:80"
                with_items:
                  - nginx
                  - redis
                
              - name: Configure monitoring
                block:
                  - name: Install Prometheus
                    apt:
                      name: prometheus
                      state: present
                      
                  - name: Install Node Exporter
                    apt:
                      name: prometheus-node-exporter
                      state: present
                      
                  - name: Start monitoring services
                    service:
                      name: "{{ item }}"
                      state: started
                      enabled: yes
                    with_items:
                      - prometheus
                      - prometheus-node-exporter
                always:
                  - name: Verify monitoring
                    uri:
                      url: http://localhost:9090
                      return_content: yes
                    register: prometheus_check
                    ignore_errors: yes

              - name: Security hardening
                block:
                  - name: Set SSH configuration
                    lineinfile:
                      path: /etc/ssh/sshd_config
                      regexp: "{{ item.regexp }}"
                      line: "{{ item.line }}"
                    with_items:
                      - { regexp: '^PermitRootLogin', line: 'PermitRootLogin no' }
                      - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
                      
                  - name: Configure fail2ban
                    apt:
                      name: fail2ban
                      state: present
                      
                  - name: Start fail2ban
                    service:
                      name: fail2ban
                      state: started
                      enabled: yes
                      
              - name: Backup configuration
                archive:
                  path: /etc/
                  dest: "/backup/etc-{{ ansible_date_time.iso8601 }}.tar.gz"
                  format: gz
                
              - name: Performance tuning
                sysctl:
                  name: "{{ item.name }}"
                  value: "{{ item.value }}"
                  state: present
                with_items:
                  - { name: 'net.ipv4.tcp_syncookies', value: '1' }
                  - { name: 'net.ipv4.tcp_max_syn_backlog', value: '2048' }
                  - { name: 'net.core.somaxconn', value: '2048' }
                
              - name: Generate status report
                template:
                  src: templates/report.j2
                  dest: /var/log/ansible-report.txt
                
            handlers:
              - name: restart ssh
                service:
                  name: sshd
                  state: restarted
                
              - name: reload nginx
                service:
                  name: nginx
                  state: reloaded
          EOF

          # Create templates
          mkdir -p templates
          cat << 'EOF' > templates/report.j2
          System Status Report
          ===================
          Generated: {{ ansible_date_time.iso8601 }}
          
          System Information:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Kernel: {{ ansible_kernel }}
          - Memory: {{ ansible_memtotal_mb }}MB
          
          Services Status:
          {% for service in services %}
          - {{ service }}: {{ lookup('pipe', 'systemctl is-active ' + service)|default('not installed', true) }}
          {% endfor %}
          
          Security Status:
          - Firewall: {{ lookup('pipe', 'ufw status')|default('not configured', true) }}
          - Fail2ban: {{ lookup('pipe', 'systemctl is-active fail2ban')|default('not installed', true) }}
          
          Performance Metrics:
          - Load Average: {{ ansible_load_avg.1 }}
          - Memory Usage: {{ (ansible_memory_mb.used / ansible_memory_mb.total * 100)|round(2) }}%
          EOF

      - name: Run playbook syntax check
        run: ansible-playbook playbooks/showcase.yml --syntax-check

      - name: Run molecule tests
        run: |
          cd roles/system_hardening
          molecule test

      - name: Run playbook
        run: |
          ansible-playbook -i inventory/hosts playbooks/showcase.yml

      - name: Generate report
        run: |
          ansible-playbook playbooks/showcase.yml --tags report

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ansible-reports
          path: |
            /var/log/ansible-report.txt
            /backup/*.tar.gz

  deploy:
    name: Deploy
    needs: ansible-test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'test' }}
    
    steps:
      - name: Deploy to environment
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'test' }}"

  notification:
    name: Send Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send status notification
        run: |
          echo "Workflow completed with status: ${{ job.status }}"
